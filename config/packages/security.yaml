security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    role_hierarchy:
        ROLE_USER: ~
        ROLE_MODERATOR: ROLE_USER
        ROLE_PROVIDER: ROLE_USER
        ROLE_ADMIN:
            - ROLE_MODERATOR
            - ROLE_PROVIDER

    access_decision_manager:
        strategy: affirmative #priority, consensus, unanimous
        allow_if_all_abstain: false
        allow_if_equal_granted_denied: false

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_admin_provider:
            memory:
                users:
                    admin@admin.com: { password: '%env(string:ADMIN_PWD)%', roles: [ROLE_USER, ROLE_ADMIN] }
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        app_all_users:
            chain:
                providers: [app_admin_provider, app_user_provider]
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_all_users
            entry_point: form_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            switch_user: true
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
            # custom_authenticator: App\Security\AppLoginFormAuthenticator

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/sso-login, allow_if: "request.headers.get('User-Agent') matches %env(USER_AGENTS)%" }
        - { path: ^/login$, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/, roles: IS_AUTHENTICATED }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
